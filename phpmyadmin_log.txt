NAME: phpmyadmin-1643454683
LAST DEPLOYED: Sat Jan 29 12:11:27 2022
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
affinity: {}
args: []
clusterDomain: cluster.local
command: []
common:
  exampleValue: common-chart
  global:
    imagePullSecrets: []
    imageRegistry: ""
commonAnnotations: {}
commonLabels: {}
containerPorts:
  http: 8080
  https: 8443
containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
db:
  allowArbitraryServer: true
  bundleTestDB: false
  chartName: ""
  enableSsl: false
  host: ""
  port: 3306
  ssl:
    caCertificate: ""
    ciphers: []
    clientCertificate: ""
    clientKey: ""
    verify: true
extraDeploy: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraVolumeMounts: []
extraVolumes: []
fullnameOverride: ""
global:
  imagePullSecrets: []
  imageRegistry: ""
hostAliases:
- hostnames:
  - status.localhost
  ip: 127.0.0.1
image:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/phpmyadmin
  tag: 5.1.2-debian-10-r0
ingress:
  annotations: {}
  apiVersion: ""
  enabled: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  hostname: phpmyadmin.local
  ingressClassName: ""
  path: /
  pathType: ImplementationSpecific
  secrets: []
  tls: false
initContainers: []
kubeVersion: ""
lifecycleHooks: {}
livenessProbe:
  enabled: true
  failureThreshold: 6
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 30
mariadb:
  architecture: standalone
  auth:
    customPasswordFiles: {}
    database: my_database
    existingSecret: ""
    forcePassword: false
    password: ""
    replicationPassword: ""
    replicationUser: replicator
    rootPassword: ""
    usePasswordFiles: false
    username: ""
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  extraDeploy: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/mariadb
    tag: 10.5.13-debian-10-r58
  initdbScripts: {}
  initdbScriptsConfigMap: ""
  kubeVersion: ""
  metrics:
    annotations:
      prometheus.io/port: "9104"
      prometheus.io/scrape: "true"
    containerSecurityContext:
      enabled: false
    enabled: false
    extraArgs:
      primary: []
      secondary: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mysqld-exporter
      tag: 0.13.0-debian-10-r209
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: 30s
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  nameOverride: ""
  networkPolicy:
    egressRules:
      customRules: {}
      denyConnectionsToExternal: false
    enabled: false
    ingressRules:
      primaryAccessOnlyFrom:
        customRules: {}
        enabled: false
        namespaceSelector: {}
        podSelector: {}
      secondaryAccessOnlyFrom:
        customRules: {}
        enabled: false
        namespaceSelector: {}
        podSelector: {}
    metrics:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
  primary:
    affinity: {}
    args: []
    command: []
    configuration: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      plugin_dir=/opt/bitnami/mariadb/plugin
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=::
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mariadb/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    revisionHistoryLimit: 10
    rollingUpdatePartition: ""
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        mysql: ""
      ports:
        mysql: 3306
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 120
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    startupWaitOptions: {}
    tolerations: []
    topologySpreadConstraints: {}
    updateStrategy:
      type: RollingUpdate
  rbac:
    create: false
  schedulerName: ""
  secondary:
    affinity: {}
    args: []
    command: []
    configuration: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    resources:
      limits: {}
      requests: {}
    revisionHistoryLimit: 10
    rollingUpdatePartition: ""
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        mysql: ""
      ports:
        mysql: 3306
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 120
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    startupWaitOptions: {}
    tolerations: []
    topologySpreadConstraints: {}
    updateStrategy:
      type: RollingUpdate
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    create: true
    name: ""
  volumePermissions:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r305
    resources:
      limits: {}
      requests: {}
metrics:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/apache-exporter
    tag: 0.11.0-debian-10-r33
  resources: {}
  service:
    annotations:
      prometheus.io/port: '{{ .Values.metrics.service.port }}'
      prometheus.io/scrape: "true"
    clusterIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    port: 9117
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  serviceMonitor:
    enabled: false
    honorLabels: false
    interval: 30s
    jobLabel: ""
    labels: {}
    metricRelabelings: []
    namespace: ""
    relabelings: []
    scrapeTimeout: ""
    selector: {}
nameOverride: ""
networkPolicy:
  egressRules:
    customRules: {}
    denyConnectionsToExternal: false
  enabled: false
  ingress:
    enabled: false
    namespaceSelector: {}
    podSelector: {}
  ingressRules:
    accessOnlyFrom:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
    backendOnlyAccessibleByFrontend: false
    customBackendSelector: {}
    customRules: {}
  metrics:
    enabled: false
    namespaceSelector: {}
    podSelector: {}
nodeAffinityPreset:
  key: ""
  type: ""
  values: []
nodeSelector: {}
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podSecurityContext:
  enabled: true
  fsGroup: 1001
priorityClassName: ""
readinessProbe:
  enabled: true
  failureThreshold: 6
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 30
resources:
  limits: {}
  requests: {}
schedulerName: ""
service:
  annotations: {}
  clusterIP: ""
  externalTrafficPolicy: Cluster
  extraPorts: []
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  nodePorts:
    http: ""
    https: ""
  ports:
    http: 80
    https: 443
  sessionAffinity: None
  sessionAffinityConfig: {}
  type: ClusterIP
sidecars: []
startupProbe:
  enabled: false
  failureThreshold: 6
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 30
tolerations: []
topologySpreadConstraints: []
updateStrategy:
  type: RollingUpdate

HOOKS:
MANIFEST:
---
# Source: phpmyadmin/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: phpmyadmin-1643454683
  namespace: "default"
  labels:
    app.kubernetes.io/name: phpmyadmin
    helm.sh/chart: phpmyadmin-9.0.2
    app.kubernetes.io/instance: phpmyadmin-1643454683
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
      nodePort: null
  selector:
    app.kubernetes.io/name: phpmyadmin
    app.kubernetes.io/instance: phpmyadmin-1643454683
---
# Source: phpmyadmin/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phpmyadmin-1643454683
  labels:
    app.kubernetes.io/name: phpmyadmin
    helm.sh/chart: phpmyadmin-9.0.2
    app.kubernetes.io/instance: phpmyadmin-1643454683
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: phpmyadmin
      app.kubernetes.io/instance: phpmyadmin-1643454683
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: phpmyadmin
        helm.sh/chart: phpmyadmin-9.0.2
        app.kubernetes.io/instance: phpmyadmin-1643454683
        app.kubernetes.io/managed-by: Helm
    spec:
      
      # yamllint disable rule:indentation
      hostAliases:
        - hostnames:
          - status.localhost
          ip: 127.0.0.1
      # yamllint enable rule:indentation
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: phpmyadmin
                    app.kubernetes.io/instance: phpmyadmin-1643454683
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      priorityClassName: ""
      securityContext:
        fsGroup: 1001
      containers:
        - name: phpmyadmin
          image: docker.io/bitnami/phpmyadmin:5.1.2-debian-10-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: DATABASE_PORT_NUMBER
              value: "3306"
            - name: DATABASE_HOST
              value: ""
            - name: PHPMYADMIN_ALLOW_NO_PASSWORD
              value: "true"
            - name: PHPMYADMIN_ALLOW_ARBITRARY_SERVER
              value: "true"
            - name: DATABASE_ENABLE_SSL
              value: "no"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            limits: {}
            requests: {}
          volumeMounts:
      volumes:

NOTES:
CHART NAME: phpmyadmin
CHART VERSION: 9.0.2
APP VERSION: 5.1.2

** Please be patient while the chart is being deployed **

1. Get the application URL by running these commands:

  echo "phpMyAdmin URL: http://127.0.0.1:80"
  kubectl port-forward --namespace default svc/phpmyadmin-1643454683 80:80

2. How to log in
phpMyAdmin has not been configure to point to a specific database. Please provide the db host,
username and password at log in or upgrade the release with a specific database:

$ helm upgrade phpmyadmin-1643454683 bitnami/phpmyadmin --set db.host=mydb
